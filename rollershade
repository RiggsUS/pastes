esphome:
  name: $hostname
  on_boot:
    - priority: -200.0
      then:
        - text_sensor.template.publish:
            id: current_status
            state: 'Started'
        - stepper.report_position: # Set stepper to global variable
            id: $mystepper
            position: !lambda return id(${mystepper}_global);
        - stepper.set_target: # Set stepper to global variable
            id: $mystepper
            target: !lambda return id(${mystepper}_global);
        - if: # If blind is Closed
            condition:
              - lambda: 'return id(${mystepper}_global) == 0;'
            then: # Publish state etc.
              - cover.template.publish:
                  id: blinded
                  state: CLOSED
              - globals.set:
                  id: last_action
                  value: '2'
              - text_sensor.template.publish:
                  id: current_status
                  state: 'Closed'
        - if: # If blind is Open
            condition:
              - lambda: 'return id(${mystepper}_global) == id(endstop);'
            then: # Publish state etc.
              - cover.template.publish:
                  id: blinded
                  state: OPEN
                  current_operation: IDLE
              - globals.set:
                  id: last_action
                  value: '0'
              - text_sensor.template.publish:
                  id: current_status
                  state: 'Open'
        - if: # If blind is Neither
            condition:
              - lambda: 'return (id(${mystepper}_global) != 0) && (id(${mystepper}_global) != id(endstop));'
            then: #  # Publish state etc.
              - cover.template.publish:
                  id: blinded
                  position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));'
                  current_operation: IDLE
              - globals.set:
                  id: last_action
                  value: '0'
              - text_sensor.template.publish:
                  id: current_status
                  state: !lambda |-
                    int pos = round(float(float(id($mystepper).current_position) / float(id(endstop))) * 100);
                    return (
                      ("Open: ") +
                      (pos ? String(pos) + "%" : "")
                    ).c_str();

esp32:
  board: m5stack-atom
  framework:
    type: arduino
    
# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "secret"

ota:
  password: "secret"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Testshade Fallback Hotspot"
    password: "secret"

## Substitutions
substitutions:
  hostname: "testshade" #hostname/devicename/esphome sensors (keep lcase)
  friendly_name: 'window shade Test' #More easily identify you roller
  speed: 60000 steps/s 
  silentspeed: 2000 steps/s # Set the speed of silent drive 100 near audible.
  mystepper: my_stepper # Name of the stepper motor (leave as is)
  delaybetweenupdates: 999 ms # milliseconds between pushing updates to home assistant (for the lulz, feel free to set 1000 ms if annoyed =P)

## Webserver 
web_server:
  port: 80

light:
  - platform: fastled_clockless
    chipset: SK6812
    pin: 27
    num_leds: 1
    rgb_order: GRB
    id: status_led
    name: ${friendly_name} Light
    effects:
      - random:
      - flicker:
      - addressable_rainbow:

## Buttons
button:
  # Button to restart the device
  - platform: restart
    name: '$hostname Restart'
  - platform: template
    name: ${hostname} Setup Button # Button to replicate the Physical Button once Settings Mode has been entered
    icon: 'mdi:gesture-tap-button'
    on_press:
      - if: # If settings variable is on
          condition:
            - lambda: 'return id(settingmode) != 0;'
          then: # Enter Setting Mode
            - script.execute: setupbutton

## Sensors with general information.
sensor:

## Text sensors with general information.
text_sensor:
  - platform: template
    name: '$hostname Status'
    update_interval: never
    id: current_status
    icon: 'mdi:chart-box-outline'


## Binary sensors
binary_sensor:
  - platform: gpio
    pin:
      number: 39
      #mode: INPUT_PULLUP
      #inverted: true
    name: '$hostname Button'
    internal: true
    on_click:
      - min_length: 50ms
        max_length: 500ms
        then: # Short press to OPEN/CLOSE blinds and also for setting up
          - if: # If settings variable is on
              condition:
                - lambda: 'return id(settingmode) != 0;'
              then: # Enter Setting Mode
                - script.execute: setupbutton
              else:
                - if: # If blind is stopped while opening #0=STOPPED WHILE OPENING
                    condition:
                      - lambda: 'return id(last_action) == 0;'
                    then:
                      - text_sensor.template.publish:
                          id: current_status
                          state: 'Closing...'
                      - globals.set:
                          id: last_action
                          value: '1'
                      - lambda: 'auto call = id(blinded).make_call().set_command_close(); call.perform();'
                    else:
                      - if: # If blind is moving down #1=MOVING DOWN
                          condition:
                            - lambda: 'return id(last_action) == 1;'
                          then:
                            - text_sensor.template.publish:
                                id: current_status
                                state: !lambda |-
                                  int pos = round(float(float(id($mystepper).current_position) / float(id(endstop))) * 100);
                                  return (
                                    (pos ? String(pos) + "% open" : "") +
                                    (" / Stopped while closing")
                                  ).c_str();
                            - globals.set:
                                id: last_action
                                value: '2'
                            - lambda: 'auto call = id(blinded).make_call().set_command_stop(); call.perform();'
                          else:
                            - if: # If blind is stopped while closing #2=STOPPED WHILE CLOSING
                                condition:
                                  - lambda: 'return id(last_action) == 2;'
                                then:
                                  - text_sensor.template.publish:
                                      id: current_status
                                      state: 'Opening...'
                                  - globals.set:
                                      id: last_action
                                      value: '3'
                                  - lambda: 'auto call = id(blinded).make_call().set_command_open(); call.perform();'
                                else:
                                  - if: # If blind is moving up #3=MOVING UP
                                      condition:
                                        - lambda: 'return id(last_action) == 3;'
                                      then:
                                        - text_sensor.template.publish:
                                            id: current_status
                                            state: !lambda |-
                                              int pos = round(float(float(id($mystepper).current_position) / float(id(endstop))) * 100);
                                              return (
                                                (pos ? String(pos) + "% open" : "") +
                                                (" / Stopped while opening")
                                              ).c_str();
                                        - globals.set:
                                            id: last_action
                                            value: '0'
                                        - lambda: 'auto call = id(blinded).make_call().set_command_stop(); call.perform();'

      - min_length: 4000ms
        max_length: 10000ms
        then: # Long press to Enter Setting Mode (4-10 Sec press)
          - logger.log: 'Entered Settings Mode'
          ## TODO: blink wemos D1 mini onboard LED when in settings mode
          - globals.set:
              id: settingmode
              value: '1'
          - text_sensor.template.publish:
              id: current_status
              state: 'Setup activated, click to start'

  #- platform: gpio
  #  pin:
  #    number: D6
  #    mode: INPUT_PULLUP
  #  name: '$hostname Window'
  #  filters:
  #    - delayed_on: 999ms
  #  device_class: window

## Stepper
#stepper:
#  - platform: uln2003
#    id: my_stepper
#    pin_a: 33
#    pin_b: 23
#    pin_c: 19
#    pin_d: 22
#    max_speed: 250 steps/s
#    sleep_when_done: true
    #step_mode: WAVE_DRIVE


    # Optional:
#    acceleration: inf
#    deceleration: inf

stepper:
  - platform: a4988
    id: $mystepper
    dir_pin:
      number: 23
      inverted: false
    step_pin:
      number: 19
      inverted: false
    sleep_pin:
      number: 22
      inverted: true
    max_speed: ${speed} # Speed of the motor
    acceleration: inf
    deceleration: inf

## Globals
globals:
  - id: ${mystepper}_global # Integer for storing the stepper position in case of reboot
    type: int
    restore_value: true
    initial_value: '0'

  - id: openclosed # Boolean to store OPEN/CLOSED state
    type: bool
    restore_value: true
    initial_value: '0'

  - id: endstop # Variable for storing ENDSTOP (how far to move stepper)
    type: int
    restore_value: true
    initial_value: '1000'

  - id: settingmode # Integer for Setup Mode
    type: int
    restore_value: no
    initial_value: '0'

  - id: drivemode # Boolean for Silent Drive Mode
    type: bool
    restore_value: no
    initial_value: '0' # Default value for stepper drive mode/speed: Set to '1' for silent / Set to '0' for speed

  - id: feedback # Boolean for continous feedback
    type: bool
    restore_value: no
    initial_value: '0' # Default value for continous feedback: Set to '1' and the cover reports back current position continously / Set to '0' and the cover updates in the beginning and end of the requested operation

  - id: last_action # Integer for last action
    type: int
    restore_value: no
#    initial_value: '0'
#0=STOPPED WHILE OPENING
#1=CLOSING / MOVING DOWN
#2=STOPPED WHILE CLOSING
#3=OPENING / MOVING UP

## Switch
switch:
  - platform: template
    name: '$hostname Activate Setup' # Switch to enter Setup Mode
    icon: 'mdi:cog-outline'
    id: setupswitch
    lambda: |-
      if (id(settingmode) != 0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        - logger.log: 'Entered Settings Mode'
        - globals.set:
            id: settingmode
            value: '1'
        - text_sensor.template.publish:
            id: current_status
            state: 'Setup activated, click to start'
    turn_off_action:
      then:
        - logger.log: 'Exiting Settings Mode'
        - globals.set:
            id: settingmode
            value: '0'
        - text_sensor.template.publish:
            id: current_status
            state: 'Setup cancelled'
  - platform: template
    icon: 'mdi:tortoise'
    name: '$hostname Drive Mode Silent' # Switch to activate silent drive mode
    id: drivemodeswitch
    lambda: |-
      if (id(drivemode) != 0) {
        return true;
      } else {
        return false;
      }
    restore_state: false
    turn_on_action:
      - logger.log: 'Drive Mode Silent'
      - globals.set:
          id: drivemode
          value: '1'
      - stepper.set_speed:
          id: $mystepper
          speed: ${silentspeed}
    turn_off_action:
      - logger.log: 'Drive Mode Speed'
      - globals.set:
          id: drivemode
          value: '0'
      - stepper.set_speed:
          id: $mystepper
          speed: ${speed}
  - platform: template
    icon: 'mdi:sync'
    name: '$hostname Continous Feedback' # Switch to activate continous feedback
    id: feedbackswitch
    lambda: |-
      if (id(feedback) != 0) {
        return true;
      } else {
        return false;
      }
    restore_state: false
    turn_on_action:
      - logger.log: 'Activated Continous Feedback'
      - globals.set:
          id: feedback
          value: '1'
    turn_off_action:
      - logger.log: 'Disabled Continous Feedback'
      - globals.set:
          id: feedback
          value: '0'

## Cover
cover:
  - platform: template
    name: '$hostname Roller'
    id: blinded
    open_action:
      then:
        - logger.log: 'Opening'
        - stepper.set_target: # Send stepper to endstop
            id: $mystepper
            target: !lambda return id(endstop);
        - if: # If continous feedback switch is on
            condition:
              - lambda: 'return id(feedback) != 0;'
            then: # with continous feedback
              - while:
                  condition:
                    lambda: 'return id($mystepper).current_position != id(endstop);'
                  then:
                    - cover.template.publish:
                        id: blinded
                        position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));'
                        current_operation: OPENING
                    - delay: ${delaybetweenupdates}
            else: # without continous feedback
              - cover.template.publish:
                  id: blinded
                  position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));'
                  current_operation: OPENING
              - wait_until: # Wait until endstop reached
                  lambda: 'return (id($mystepper).current_position == id(endstop));'
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id($mystepper).current_position;
        - globals.set: # Set toggle to OPEN (No need for 'optimistic mode')
            id: openclosed
            value: '1'
        - cover.template.publish:
            id: blinded
            state: OPEN
            current_operation: IDLE
        - globals.set:
            id: last_action
            value: '0'
        - text_sensor.template.publish:
            id: current_status
            state: 'Open'
    close_action:
      then:
        - logger.log: 'Closing'
        - stepper.set_target: # Send stepper to 0
            id: $mystepper
            target: '0'
        - if: # If continous feedback switch is on
            condition:
              - lambda: 'return id(feedback) != 0;'
            then: # with continous feedback
              - while:
                  condition:
                    lambda: 'return id($mystepper).current_position != 0;'
                  then:
                    - cover.template.publish:
                        id: blinded
                        position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));'
                        current_operation: CLOSING
                    - delay: ${delaybetweenupdates}
            else: # without continous feedback
              - cover.template.publish:
                  id: blinded
                  position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));'
                  current_operation: CLOSING
              - wait_until: # Wait until endstop reached
                  lambda: 'return id($mystepper).current_position == 0;'
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id($mystepper).current_position;
        - globals.set: # Set toggle to CLOSED (No need for 'optimistic mode')
            id: openclosed
            value: '0'
        - cover.template.publish:
            id: blinded
            state: CLOSED
            current_operation: IDLE
        - globals.set:
            id: last_action
            value: '2'
        - text_sensor.template.publish:
            id: current_status
            state: 'Closed'
    position_action:
      then:
        - stepper.set_target:
            id: $mystepper
            target: !lambda return int(id(endstop) * pos);
        - if: # If continous feedback switch is on
            condition:
              - lambda: 'return id(feedback) != 0;'
            then: # with continous feedback
              - while:
                  condition:
                    lambda: 'return id($mystepper).current_position != int(id(endstop) * pos);'
                  then:
                    - cover.template.publish:
                        id: blinded
                        position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));'
                    - delay: ${delaybetweenupdates}
            else: # without continous feedback
              - wait_until: # Wait until endstop reached
                  lambda: 'return id($mystepper).current_position == (int(id(endstop) * pos));'
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id($mystepper).current_position;
        - cover.template.publish:
            id: blinded
            position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));'
            current_operation: IDLE
    stop_action:
      then:
        - stepper.set_target:
            id: $mystepper
            target: !lambda return id($mystepper).current_position;
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id($mystepper).current_position;
        - cover.template.publish:
            id: blinded
            position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));'
            current_operation: IDLE
    has_position: true
    device_class: blind

## Scripts
script:
  - id: setupbutton
    then:
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 3);'
          then:
            - logger.log: 'Pressed Setup Button: Mode 3'
            - stepper.set_target: # Set Stepper position
                id: $mystepper
                target: !lambda return id($mystepper).current_position;
            - globals.set: # Set Endstop Variable
                id: endstop
                value: !lambda return id($mystepper).current_position;
            - globals.set: # Set Global stepper position
                id: ${mystepper}_global
                value: !lambda return id($mystepper).current_position;
            - globals.set: # Reset Setting Mode
                id: settingmode
                value: '0'
            - globals.set: # Set toggle to Open
                id: openclosed
                value: '1'
            - cover.template.publish:
                id: blinded
                state: OPEN
                current_operation: IDLE
            - logger.log: 'Exiting Setting Mode'
            - text_sensor.template.publish:
                id: current_status
                state: 'Setup complete'
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 2);'
          then:
            - logger.log: 'Pressed Setup Button: Mode 2'
            - stepper.report_position: # Reset Stepper position to 0
                id: $mystepper
                position: '0'
            - stepper.set_target: # Reset Stepper position to 0
                id: $mystepper
                target: '0'
            - globals.set: # Move stepper to 0 (doesn't move it's already there!)
                id: ${mystepper}_global
                value: '0'
            - stepper.set_target: # Reset Stepper position to 72000
                id: $mystepper
                target: '720000'
            - globals.set: # Advance setup to next mode
                id: settingmode
                value: '3'
            - text_sensor.template.publish:
                id: current_status
                state: 'Click once at top positon'
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 1);'
          then:
            - logger.log: 'Pressed Setup Button: Mode 1'
            - stepper.report_position: # Set Stepper position to 72000, makes it move to 0 (Closed)
                id: $mystepper
                position: '720000'
            - globals.set: # Advance setup to next mode
                id: settingmode
                value: '2'
            - text_sensor.template.publish:
                id: current_status
                state: 'Click once at bottom position'
captive_portal:
    
